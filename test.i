# 1 "test.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "test.c"
# 65 "test.c"
template <typename floatval_t> static floatval_t lbgfs_evaluate_1( const floatval_t *X, const floatval_t *params, floatval_t *g, const int n, const floatval_t step ) { floatval_t* batch_x; floatval_t fx = 0.; floatval_t fx_sum = 0.; floatval_t* g_sum; for(int i=0;i<n;i++) { g[i] = 0.; } fx = FUNCTION1(X, params); DERIVATIVES1(g, X, params, fx, step); if(fx < 0.0) cout << "The cost function was negative!" << endl; return fx; }
# 255 "test.c"
template <typename floatval_t> static floatval_t lbgfs_evaluate_0( const floatval_t *X, const floatval_t *params, floatval_t *g, const int n, const floatval_t step ) { floatval_t* batch_x; floatval_t fx = 0.; floatval_t fx_sum = 0.; floatval_t* g_sum; for(int i=0;i<n;i++) { g[i] = 0.; } fx = FUNCTION0(X, params); DERIVATIVES0(g, X, params, fx, step); if(fx < 0.0) cout << "The cost function was negative!" << endl; return fx; } template <typename floatval_t> static floatval_t lbgfs_evaluate_1( const floatval_t *X, const floatval_t *params, floatval_t *g, const int n, const floatval_t step ) { floatval_t* batch_x; floatval_t fx = 0.; floatval_t fx_sum = 0.; floatval_t* g_sum; for(int i=0;i<n;i++) { g[i] = 0.; } fx = FUNCTION1(X, params); DERIVATIVES1(g, X, params, fx, step); if(fx < 0.0) cout << "The cost function was negative!" << endl; return fx; } template <typename floatval_t> static floatval_t lbgfs_evaluate_2( const floatval_t *X, const floatval_t *params, floatval_t *g, const int n, const floatval_t step ) { floatval_t* batch_x; floatval_t fx = 0.; floatval_t fx_sum = 0.; floatval_t* g_sum; for(int i=0;i<n;i++) { g[i] = 0.; } fx = FUNCTION2(X, params); DERIVATIVES2(g, X, params, fx, step); if(fx < 0.0) cout << "The cost function was negative!" << endl; return fx; } template <typename floatval_t> static floatval_t lbgfs_evaluate_3( const floatval_t *X, const floatval_t *params, floatval_t *g, const int n, const floatval_t step ) { floatval_t* batch_x; floatval_t fx = 0.; floatval_t fx_sum = 0.; floatval_t* g_sum; for(int i=0;i<n;i++) { g[i] = 0.; } fx = FUNCTION3(X, params); DERIVATIVES3(g, X, params, fx, step); if(fx < 0.0) cout << "The cost function was negative!" << endl; return fx; } template <typename floatval_t> static floatval_t lbgfs_evaluate_4( const floatval_t *X, const floatval_t *params, floatval_t *g, const int n, const floatval_t step ) { floatval_t* batch_x; floatval_t fx = 0.; floatval_t fx_sum = 0.; floatval_t* g_sum; for(int i=0;i<n;i++) { g[i] = 0.; } fx = FUNCTION4(X, params); DERIVATIVES4(g, X, params, fx, step); if(fx < 0.0) cout << "The cost function was negative!" << endl; return fx; } template <typename floatval_t> static floatval_t lbgfs_evaluate_5( const floatval_t *X, const floatval_t *params, floatval_t *g, const int n, const floatval_t step ) { floatval_t* batch_x; floatval_t fx = 0.; floatval_t fx_sum = 0.; floatval_t* g_sum; for(int i=0;i<n;i++) { g[i] = 0.; } fx = FUNCTION5(X, params); DERIVATIVES5(g, X, params, fx, step); if(fx < 0.0) cout << "The cost function was negative!" << endl; return fx; } template <typename floatval_t> static floatval_t lbgfs_evaluate_6( const floatval_t *X, const floatval_t *params, floatval_t *g, const int n, const floatval_t step ) { floatval_t* batch_x; floatval_t fx = 0.; floatval_t fx_sum = 0.; floatval_t* g_sum; for(int i=0;i<n;i++) { g[i] = 0.; } fx = FUNCTION6(X, params); DERIVATIVES6(g, X, params, fx, step); if(fx < 0.0) cout << "The cost function was negative!" << endl; return fx; } template <typename floatval_t> static floatval_t lbgfs_evaluate_7( const floatval_t *X, const floatval_t *params, floatval_t *g, const int n, const floatval_t step ) { floatval_t* batch_x; floatval_t fx = 0.; floatval_t fx_sum = 0.; floatval_t* g_sum; for(int i=0;i<n;i++) { g[i] = 0.; } fx = FUNCTION7(X, params); DERIVATIVES7(g, X, params, fx, step); if(fx < 0.0) cout << "The cost function was negative!" << endl; return fx; }
